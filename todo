todo
1. test timing stack, iterators
2. test `lexicographical_compare`
3. test `type_traits`
4. test _everyting_ with `-Wconversion` and `valgrind`
5. `is_constructible` and co. (cf. `type_traits`) for pair conversions
   (needed by `-Wconversion`)
6. `output_iterator.hpp` to `.cpp` (same for `timing_iterator.hpp`)
7. add tests with different `Compare` objects
    (e.g. compare `maped_type` instead of `key_type`)
8. `output_stack`: `valgrind` warns about uninitialised values (`ikos` could help)
________

maybe
- `explicit` qualifer upon constructors
- `ft::equal` (upon all ft datatypes: map, vector, tree, pair, etc.)
- `make all` re-mkdir output folders but not timing ones...
- keep our iterator_traits but forget abour our iterator struct
--> this way, we can use stl algorithms act upon our containers
________

readme
- explain why some constructors are explicit
- explain why east const instead of west const
--> the only consistent way to write const (got to read from right-to-left)
- explain the difference between const and non-const begin() and end()
- explain why we choose this implementation for const_iterator
--> explain why the templated solution is better in term of debugging
(i.e. clangd doesnt warn with my solution when 'it = const_it', whereas
it would do with the template solution.)
- say some about the vague subject and why some tests here may be overkill
- explain why map.end() dereferencing segfault: no sentinel node
- make note that insert with hint is just a regular insert
- say some about iterator and reverse iterator relationship
- say some about doubling `assert` parenthesis
- say some about our use of `enable_if`
________

iterators
- vector --> random access iterator
- map    --> bidirectional iterator
- base_iterator (iterator traits typedefs + operateurs comparaison)
________

template <bool>
struct ft_static_assert;

template <>
struct ft_static_assert<true>{};
________
https://cppinsights.io/
________
